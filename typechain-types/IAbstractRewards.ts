/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IAbstractRewardsInterface extends utils.Interface {
  contractName: "IAbstractRewards";
  functions: {
    "cumulativeRewardsOf(address)": FunctionFragment;
    "withdrawableRewardsOf(address)": FunctionFragment;
    "withdrawnRewardsOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cumulativeRewardsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableRewardsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnRewardsOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cumulativeRewardsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableRewardsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnRewardsOf",
    data: BytesLike
  ): Result;

  events: {
    "RewardsDistributed(address,uint256)": EventFragment;
    "RewardsWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsWithdrawn"): EventFragment;
}

export type RewardsDistributedEvent = TypedEvent<
  [string, BigNumber],
  { by: string; rewardsDistributed: BigNumber }
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export type RewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { by: string; fundsWithdrawn: BigNumber }
>;

export type RewardsWithdrawnEventFilter =
  TypedEventFilter<RewardsWithdrawnEvent>;

export interface IAbstractRewards extends BaseContract {
  contractName: "IAbstractRewards";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAbstractRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cumulativeRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawableRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawnRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  cumulativeRewardsOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawableRewardsOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawnRewardsOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    cumulativeRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawableRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RewardsDistributed(address,uint256)"(
      by?: string | null,
      rewardsDistributed?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      by?: string | null,
      rewardsDistributed?: null
    ): RewardsDistributedEventFilter;

    "RewardsWithdrawn(address,uint256)"(
      by?: string | null,
      fundsWithdrawn?: null
    ): RewardsWithdrawnEventFilter;
    RewardsWithdrawn(
      by?: string | null,
      fundsWithdrawn?: null
    ): RewardsWithdrawnEventFilter;
  };

  estimateGas: {
    cumulativeRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawableRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cumulativeRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawableRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawnRewardsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
